

###########################################################################################################################
#


### Ashley Sanders & David Porubsky
### May 30, 2015

################  ################	################	################  ################	################	################	################
################  this function will genotype strand states between breakpoints                                                 ################
################  It segments a chromosome by breaks and performs 3 Fisher Exact tests on reads in segments to find bestfit     ################
################  it generates a new output file with the best fit genotypes at segmented chromosome                           ################
################  ################	################	################  ################	################	################	################


# startPos is start of chr, endPos is end of chr (i.e. the lower and upper ranges you are considering)
# breaks is the breakpoint file generated by BreakSeekR
# fileFreqs is a bed of reads (name, chr, startPos,strand) for the chr and  lib you are considering
# backG is the percent (e.g. 0.02 = 2%) of background reads allowed for WW or CC genotype calls 
# minReads are the minimal number of reads between two breaks required for genotyping


GenotypeBreaks<- function(startPos, endPos, breaks, fileFreqs, backG=0.02, minReads=10)
{
  # function that reformats a list (x) of positions into a dataframe (df) of starts and ends
  reformat2 <- function(x) 
  {
    out_list <- list()
    for ( i in seq(1, length(x), 2) ) {
      out_list[[i]] <- c(x[i], x[i+1])
    }
    mt <- do.call("rbind",out_list)
    df <- data.frame(mt)
    colnames(df) <- c("start", "end")
    df
  }

  # function that genotypes a position based on number of + and - reads -> by Ashley Sanders
  genotype <- function(cReads, wReads, roiReads, bg=backG, minR=minReads)
  {  ## FISHER EXACT TEST
    if( roiReads >= minR){
    CCpVal<- fisher.test(matrix(c(cReads, wReads, round(roiReads*(1-bg)), round(roiReads*bg)), ncol=2, byrow=T))[[1]]
    WCpVal<-fisher.test(matrix(c(cReads, wReads, round(roiReads*0.5), round(roiReads*0.5)), ncol=2, byrow=T))[[1]]
    WWpVal<- fisher.test(matrix(c(wReads, cReads, round(roiReads*(1-bg)), round(roiReads*bg)), ncol=2, byrow=T))[[1]]
    
    pVal<- cbind(CCpVal, WCpVal, WWpVal)
    maxP<- max(pVal)
    #if (pVal[which(pVal != maxP)][1] < 0.05 & pVal[which(pVal != maxP)][2] < 0.05) { signf <- '*'} else {signf <- 'ns'}
    if (maxP == CCpVal) { bestFit <- 'cc'} else if (maxP == WCpVal) { bestFit <- 'wc' } else{ bestFit <- 'ww'}
    } else{ 
      bestFit<-NA
      maxP<-NA
    }
    return(c(bestFit, maxP))
  }  
  ############################

  # create a list of positions from breaks file 
  breakPs<- sort(c(breaks[,1], breaks[,2]))
  x<- c(startPos, breakPs, endPos)
  
  # create ranges between the breakpoints -> start and stops in a dataframe, use this to genotype between
  df<- reformat2(x)
  
  ## pull out reads of each line, and genotype in the fileFreqs
  Ws<- sapply(seq(1:nrow(df)), function(x) table(fileFreqs[which(fileFreqs$pos > df$start[x] & fileFreqs$pos < df$end[x]),4])[2]) ## number of minus reads in each break
  Cs<- sapply(seq(1:nrow(df)), function(x) table(fileFreqs[which( fileFreqs$pos > df$start[x] & fileFreqs$pos < df$end[x]),4])[1])  ## number of plus reads in each break
  readNo<- sapply(seq(1:nrow(df)), function(x) nrow(fileFreqs[which( fileFreqs$pos > df$start[x] & fileFreqs$pos < df$end[x]),]))  ## number of plus reads in each break
  
  
  ## bestFit genotype each region by Fisher Exact test
  genoT<- sapply(seq(1:nrow(df)), function(x) genotype(Cs[x], Ws[x], readNo[x]))[1,]
  pVal<- sapply(seq(1:nrow(df)), function(x) genotype(Cs[x], Ws[x], readNo[x]))[2,]

  results<- cbind(df, readNo, Ws, Cs, genoT, pVal)
  return(results)

}
