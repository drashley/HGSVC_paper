

### Ashley Sanders & David Porubsky
### May 12, 2015

################	################	################	################  ################	################	################	################
################  this function will calculate deltaWs from fileFreqs                                    ################
################  it will bin the data for this calculation and compare LHS and RHS of bin               ################
################ it will generate a file with new start/end Positions and deltaW for region              ################
################  ################	################	################  ################	################	################	################


deltaWCalculator<- function(fileFreqs, chr, window=10, gapfile=F) 
  
  # fileFreqs contains chr in  2nd col, startPos  in 3rd col, and strand  in 4th col
  # window is the % of readDepth used to calculate the sliding window  
  # if gapfile is provided (length>1) then will remove these regions from the deltaWs (overlaps set to 0)

{
  start <- 1
  end <- nrow(fileFreqs)
  
  win<- round(nrow(fileFreqs)/window) # window size assigned based on a percentage of total reads in file
  if (win %% 2 != 0) {win <- win+1} # ensures even number for window
  
  ## using a sliding window, calculate the change in W reads (note: checked and deltaC yields the same result)
  ranges<- successiveIRanges(rep(win, (nrow(fileFreqs)-win+1)), gapwidth=1-win)    
  
  startPos<- fileFreqs[end(ranges)-win*0.5,3] # pulls out the startPos for the deltaW ranges
  endPos<- fileFreqs[start(ranges)+win*0.5,3] # pulls out the endPos for the deltaW ranges
  ## calculate deltaWs    
  firstWs <- sapply(start(ranges), function(x) table(fileFreqs[start(ranges)[x]:(end(ranges)-win*0.5)[x],4])[2]) ## number of W in the first 1/2 of the ranges (i.e. start(ranges) to end(ranges)-win*05))
  secondWs <- sapply(start(ranges), function(x) table(fileFreqs[(start(ranges)+win*0.5)[x]:end(ranges)[x],4])[2])  ## number of W in the second 1/2 of the ranges (i.e. start(ranges)+win*0.5 to end(ranges))
  dWs<- abs( firstWs-secondWs) # calculate difference in Ws    
  
  deltaWs <- data.frame(startPos=startPos, endPos=endPos, deltaW=dWs) 
  
  
  if (length(gapfile) > 1)
  {
    gapsChr<- gapfile[which(gapfile[,2] == as.character(fileFreqs[1,2])),]
    if(nrow(gapsChr) > 0) #'*'#
    {
      gapRle  <- GRanges(chr, IRanges(start=gapsChr[,3], end=gapsChr[,4]))
      
      dWs = GRanges(chr, IRanges(start=deltaWs[,1], end=deltaWs[,2]), score=deltaWs[,3]) 
      hits<- findOverlaps(dWs, gapRle)
      deltaWs[queryHits(hits),3] <-0 # turns any deltaWs in gaps to 0
    }   
  }
  return(deltaWs)
} 


