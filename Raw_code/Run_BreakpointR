
#################### # Ashley Sanders
##################### June 2, 2015

####################################################################################################################
#### This script will move through .bam files in a folder and:
## 1. calculate deltaWs chromosome-by-chromsome
## 2. localize breaks that pass zlim above the threshold
## 3. genotype both sides of breaks to confirm whether strand state changes
## 4. write a file of _reads, _deltaWs and _breaks in a chr fold -> can upload on to UCSC Genome browser
## 5. write a file for each index with all chromosomes included -> can upload on to UCSC Genome browser
####################################################################################################################


# type is the file extension (e.g. 'bam' or 'bed')
# win is the window size used to calculate deltaWs, can be defined (e.g. 100) or 'scale'
# trim is the amount of outliers in deltaWs removed to calculate the stdev (10 will remove top 10% and bottom 10% of deltaWs)
# peakTh is the treshold that the peak deltaWs must pass to be considered a breakpoint
# zlim is the number of stdev that the deltaW must pass the peakTh (ensures only significantly higher peaks are considered)
# bg is the amount of background introduced into the genotype test
# minReads is the minimum number of reads required for genotyping
# writeBed will generate a bed of reads and deltaWs and breaks for upload onto the UCSC genome browser
# depthTable will generate a table that also contains reads/Mb between breaks (important for SCE calls)


breakPointR_bam<- function(chrTable, gapfile, dataDirectory='./BreakPointR_analysis/', type='bam', win='scale', trim=10, peakTh=0.33, zlim=3.291, bg=0.02, minReads=10, writeBed=T, pairEnd=T, verbose=T, depthTable=T)
{  
  dir.create(dataDirectory)
  fileDestination <- dataDirectory
  
  pattern <- paste('.', type,'$', sep="")
  fileList <- list.files(path='.', pattern=pattern, full.names=TRUE)
  fileLength <- length(fileList)
  
  indexCounter<-0
  options(scipen=20)
  
  for(fileName in fileList)
  {#1
    
    #index<- gsub("./", "", fileName)
    #index<- gsub(".bam", "", index)
    index <- findIndex(fileName)
    
    indexCounter <- indexCounter + 1
    if(verbose==T){message(paste('** RUNNING ', index, ' [libNo ', indexCounter,'/', length(fileList) , '] **', sep=""))}
    
    bed<- countDirectionReads(fileName, qual=10, rmdup=T, frequencies=F, pairEnd=pairEnd) # generates bed from the bam
    if(verbose==T){message (paste('~> bed file generated for ', fileName))}
    
    for(i in seq(1,nrow(chrTable)))
    { #2
      ch<- chrTable[i,1]
      chr<- paste('chr', ch, sep="")
      
      dir.create(paste(fileDestination, chr, sep=""))
      chrfileDestination <- (paste(fileDestination, chr, '/', sep=""))
      
      Freqs<- bed[which(bed[,1] == as.character(ch)),] 
      indexFreqs<- cbind(fileName, chr, Freqs[3], Freqs[2])
      indexFreqs<- indexFreqs[order(indexFreqs[,3]),] 
      
      
      if (win=='scale'){
        bin<-round(100/(chrTable[1,3]/chrTable[i,3])) # scales the bin to chr size, anchored to chr1 (249250621 bp)
      }
      
      ## calculate the deltaWs for the Freqs (index/chr/startPos/strand...)
      deltaWs<- deltaWCalculator(indexFreqs, chr, window=bin, gapfile=gapfile)
      if(verbose==T){message(paste('deltaWs calculated for ', fileName, ' _ ', chr, sep=""))}
      #plot(deltaWs[,1], deltaWs[,3], type="l")
      #ggplot(deltaWs) + geom_step(aes(x=startPos, y=deltaW))
      
      ## find the breakpoints in the deltaWs
      breaks<- breakSeekR(deltaWs, trim=trim, peakTh=peakTh, zlim=zlim) 
      if(verbose==T){message(paste('breakpoints found for ', fileName, ' _ ', chr, sep=""))  }
      
      if(length(breaks) >0 ){
        ## genotype the file between the breaks
        startPos<-chrTable[i,2] # start of chr
        endPos<-chrTable[i,3] # end of chr
        genoFile<- GenotypeBreaks(startPos, endPos, breaks, indexFreqs, backG=bg, minReads=minReads)
        genoFile<-na.omit(genoFile)
        
        ## remove break if genotype is the same on either side of it
        newBreaks<-data.frame(fiveP=vector(), threeP=vector(), change=vector())
        for (line in seq(nrow(genoFile)-1)){
          if( (genoFile$genoT[line] == genoFile$genoT[line+1]) ==FALSE)
            {
            #bp<-cbind(fiveP=genoFile$end[line], threeP=genoFile$start[line+1], as.character(upStm<-genoFile$genoT[line]), as.character(dwnStm<-genoFile$genoT[line+1]))
            bp<-data.frame(fiveP=genoFile$end[line], threeP=genoFile$start[line+1], change=paste(as.character(genoFile$genoT[line]), as.character(genoFile$genoT[line+1]), sep="-" ))
            newBreaks<-rbind(newBreaks,bp)
          }}
        if(nrow(newBreaks) == 0){newBreaks<-0} # if newBreaks is now empty (b.c genoTs match) assign something to newBreaks
      }else{newBreaks<-0} # assigns something to newBreaks if no peaks found
      
      
      if (depthTable==T && newBreaks != 0) # write a table with the depth information for everything between the breaks
      {
        startPos<-chrTable[i,2] # start of chr
        endPos<-chrTable[i,3] # end of chr
        outputFile<- GenotypeBreaks(startPos, endPos, newBreaks, indexFreqs, backG=bg, minReads=minReads)
        outputFile<-na.omit(outputFile)
        depths <- round(outputFile$readNo / (outputFile$end-outputFile$start)*1000000, digits=2)      
        depthT<- cbind(chr, outputFile, depths) # depths = chr, start, end, readNo, Ws, Cs, genoT, pVal
        if( chr == 'chr1'){ # write column names
          write.table(depthT, file=paste(fileDestination, index, '_depthTable.txt', sep=""), row.names=FALSE, col.names=T, quote=FALSE, append=F)
        } else{
          write.table(depthT, file=paste(fileDestination, index, '_depthTable.txt', sep=""), row.names=FALSE, col.names=F, quote=FALSE, append=T)
        }}
      
      if (writeBed==T){
        ################# WRITE ALL THE DATA INTO A SINGLE BED FILE:
        # write table of fileFreqs
        bedfile<- cbind(chr,  Freqs[3], Freqs[3]+100, index, Freqs[4], Freqs[2])
        head<- paste('track name=', index, '_reads_', chr, ' visibility=1 colorByStrand="103,139,139 243,165,97"', sep="")
        write.table(head, file=paste(chrfileDestination, index, '_', chr, '_bin', bin, '_breakpointR.bed', sep=""), row.names=FALSE, col.names=F, quote=F, append=T)   
        write.table(bedfile, file=paste(chrfileDestination, index, '_', chr, '_bin', bin, '_breakpointR.bed', sep=""), row.names=FALSE, col.names=F, quote=F, append=T)
        
        ## append the bedgraph of deltaWs:
        bedG<- cbind(chr, deltaWs)    
        head<- paste('track type=bedGraph name=', index,'_dWs', '_bin', bin, '_', chr, ' description=BedGraph_of_deltaWs_',index, '_',  chr, ' visibility=full color=200,100,10', sep="")
        write.table(head, file=paste(chrfileDestination, index, '_', chr, '_bin', bin, '_breakpointR.bed', sep=""), row.names=FALSE, col.names=F, quote=F, append=T)   
        write.table(bedG, file=paste(chrfileDestination, index, '_', chr, '_bin', bin, '_breakpointR.bed', sep=""), row.names=FALSE, col.names=F, quote=F, append=T)      
        
        ## append the breakpoints:
        if( newBreaks ==0 ){bpG<- cbind(chr,0,1,'na')}else{
          bpG<-  cbind(chr, newBreaks[,1:3])}  
          head<- paste('track name=', index, '_BPs', '_bin', bin, '_', chr, ' description=BedGraph_of_breakpoints_',index, '_',  chr, ' visibility=pack color=75,125,180', sep="")
          write.table(head, file=paste(chrfileDestination, index, '_', chr, '_bin', bin, '_breakpointR.bed', sep=""), row.names=FALSE, col.names=F, quote=F, append=T)   
          write.table(bpG, file=paste(chrfileDestination, index, '_', chr, '_bin', bin, '_breakpointR.bed', sep=""), row.names=FALSE, col.names=F, quote=F, append=T)
      }
      
      ### Write an INDEX file of delatWs and breaks for ALL CHR
      if( chr== 'chr1'){ # write header
        head_reads<- paste('track name=', index, '_reads visibility=1 colorByStrand="103,139,139 243,165,97"', sep="")
        write.table(head_reads, file=paste(fileDestination, index, '_reads.txt', sep=""), row.names=FALSE, col.names=F, quote=FALSE, append=F)   
        head_dW<- paste('track type=bedGraph name=', index,'_dWs description=BedGraph_of_deltaWs_',index, '_allChr visibility=full color=200,100,10', sep="")
        write.table(head_dW, file=paste(fileDestination, index, '_DeltaWs.txt', sep=""), row.names=FALSE, col.names=F, quote=FALSE, append=F)   
        head_br<- paste('track name=', index, '_BPs description=BedGraph_of_breakpoints_',index,'_allChr visibility=dense color=75,125,180', sep="")
        write.table(head_br,  file=paste(fileDestination, index, '_breakPoints.txt', sep=""), row.names=FALSE, col.names=F, quote=FALSE, append=F)
      } # write data
      write.table(bedfile,file=paste(fileDestination, index, '_reads.txt', sep=""), row.names=FALSE, col.names=F, quote=FALSE, append=T)   
      write.table(bedG, file=paste(fileDestination, index, '_DeltaWs.txt', sep=""), row.names=FALSE, col.names=F, quote=FALSE, append=T)
      write.table(bpG, file=paste(fileDestination, index, '_breakPoints.txt', sep=""), row.names=FALSE, col.names=F, quote=FALSE, append=T)
      
      
      ### append to a MONSTER file for each chr, to find coverage across all tested libraries
      #file<- cbind(bedG, index=index) # file of deltaWs
      #write.table(file, file=paste(fileDestination, chr, '_allcells_DeltaWs.txt', sep=""), row.names=FALSE, col.names=F, quote=FALSE, append=T)
      #file2<- cbind(chr, newBreaks, index=index) # file of breaks
      #write.table(file2, file=paste(fileDestination, chr, '_allcells_breakPoints.txt', sep=""), row.names=FALSE, col.names=F, quote=FALSE, append=T)
      #file3<- cbind(index, chr, genoFile)
      #write.table(file3, file=paste(fileDestination, chr, '_allcells_genoTypes.txt', sep=""), row.names=FALSE, col.names=F, quote=FALSE, append=T)
      
    }#2
  }#1  
  
}    

    
